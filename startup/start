# End-to-end guide: Kernel-first to Android with Waydroid and VirtualBox on Ubuntu 22.04

Below is a practical, step-by-step path you can follow: build a Linux kernel with Android IPC (binderfs), validate Android via Waydroid, validate system images in VirtualBox, then build Android (generic and device-specific) and finally flash to a Xiaomi Mi 8 SE. Commands assume Ubuntu 22.04 (Jammy), bash, and sudo privileges.

---

## Prerequisites and goals

- **Host OS:** Ubuntu 22.04 installed (not Live USB), updated, rebooted.
- **Hardware:** 16 GB RAM (32 GB recommended), 200+ GB free SSD, Intel/AMD GPU preferred.
- **Accounts:** GitHub/GitLab for code, Google account optional for Play services (not required).
- **Tools:** fastboot/adb for flashing and debugging.

Install base packages:
```bash
sudo apt update
sudo apt install -y build-essential bc bison flex libssl-dev libelf-dev \
  dwarves pahole libncurses5-dev libncursesw5-dev ccache git curl zip unzip rsync \
  python3 python3-pip openjdk-11-jdk repo android-sdk-platform-tools-common \
  lzop cpio jq
```

---

## Build a Linux kernel with binderfs support

This ensures your host can run Android containers (Waydroid).

### 1) Get kernel source (Ubuntu or mainline)
- **Option A (Ubuntu-flavored):**
```bash
mkdir -p ~/kernel && cd ~/kernel
apt source linux-image-$(uname -r) || true
```
- **Option B (Mainline stable):**
```bash
cd ~/kernel
git clone --depth=1 https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git -b linux-6.6.y
cd linux
```

### 2) Start from a working config
```bash
cp /boot/config-$(uname -r) .config || make defconfig
yes "" | make olddefconfig
```

### 3) Enable Android binder and friends
Run menuconfig and ensure the following:
```bash
make menuconfig
```
Enable or set to built-in (Y) or module (M):
- **Android:**
  - CONFIG_ANDROID=y
  - CONFIG_ANDROID_BINDER_IPC=y or m
  - CONFIG_ANDROID_BINDERFS=y
- **Loop device:**
  - CONFIG_BLK_DEV_LOOP=m
- **Process pressure:**
  - CONFIG_PSI=y
- **Networking common (usually enabled):**
  - IPv4/IPv6 and Netfilter defaults are fine

Save and exit.

### 4) Build and install
This uses all CPU cores:
```bash
make -j"$(nproc)"
sudo make modules_install
sudo make install
sudo update-initramfs -c -k $(make kernelrelease)
sudo update-grub
sudo reboot
```

### 5) Verify binderfs after reboot
```bash
uname -r
grep -i binder /proc/filesystems || echo "binderfs missing"
sudo modprobe binder_linux || true
sudo modprobe loop
```
Mount binderfs and check devices:
```bash
sudo mkdir -p /dev/binderfs
sudo mount -t binder binder /dev/binderfs
ls -l /dev/binderfs
```
You should see binder, hwbinder, vndbinder nodes.

---

## Install and validate Waydroid

Waydroid runs Android in a container using your kernel’s binderfs, giving you fast, near‑native validation.

### 1) Install Waydroid
```bash
sudo add-apt-repository -y ppa:waydroid/waydroid
sudo apt update
sudo apt install -y waydroid
```

### 2) Initialize image and service
```bash
sudo waydroid init -s GAPPS=false -f
sudo systemctl enable --now waydroid-container
```

If you see binder errors, ensure you mounted binderfs (previous section) and that loop module is loaded:
```bash
sudo modprobe loop
```

### 3) Launch Waydroid
- **Full UI (recommended first run):**
```bash
waydroid session start &
waydroid show-full-ui
```
- **Multi-window mode:**
```bash
waydroid session start &
waydroid prop set persist.waydroid.multi_windows true
```

### 4) Sanity checks inside Waydroid
- **Networking:** Open browser and load a website.
- **ADB shell:**
```bash
waydroid shell getprop ro.build.version.release
waydroid shell pm list packages
```
- **Performance:** Apps should be responsive; if rendering is slow, switch to a Wayland session and ensure you’re on Intel/AMD GPU drivers.

---

## Validate Android images in a VM with VirtualBox

VirtualBox is useful for testing generic system images without relying on host kernel features.

### 1) Install VirtualBox
```bash
sudo apt install -y virtualbox
```

### 2) Run Android-x86 ISO (quickest VM path)
- **Download:** Latest Android-x86 ISO from the official project.
- **Create VM:** Type Linux/Other Linux (64-bit), 4+ CPUs, 4–8 GB RAM, 32+ GB disk, enable EFI if the ISO prefers it.
- **Boot and install:** Follow installer; choose “Auto-install to specified hard disk” for speed.

### 3) Optional: Test your own AOSP x86_64 build
- Build a generic x86_64 target (next section), package into an ISO (or boot via QEMU). For VirtualBox, attach the ISO and boot; verify UI, input, and networking.

---

## Build Android: generic first, then device-specific

Start with a generic target to verify your build pipeline quickly. Then move to Xiaomi Mi 8 SE (sirius).

### 1) Set up Android build environment
```bash
mkdir -p ~/android && cd ~/android
git config --global user.name "Your Name"
git config --global user.email "you@example.com"
curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
chmod a+x ~/bin/repo
echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
source ~/.bashrc
```

Install extra dependencies for AOSP/Lineage:
```bash
sudo apt install -y git-core gnupg flex bison gperf build-essential \
  zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 \
  lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev \
  libgl1-mesa-dev libxml2-utils xsltproc fontconfig
```

### 2) Sync source (choose one)

- **AOSP (example: android-14.0.0_rX):**
```bash
mkdir -p ~/android/aosp && cd ~/android/aosp
repo init -u https://android.googlesource.com/platform/manifest -b android-14.0.0_r30
repo sync -j"$(nproc)"
```

- **LineageOS (more device trees available):**
```bash
mkdir -p ~/android/lineage && cd ~/android/lineage
repo init -u https://github.com/LineageOS/android.git -b lineage-21.0
repo sync -j"$(nproc)"
```

### 3) Build a generic image (fast validation)

- **Environment:**
```bash
source build/envsetup.sh
```
- **Target (pick one):**
  - AOSP emulator images:
    ```bash
    lunch aosp_x86_64-userdebug
    ```
  - Lineage generic system image (GSI) for arm64:
    ```bash
    lunch lineage_arm64-userdebug
    ```
- **Build:**
```bash
m -j"$(nproc)"
```

Artifacts will be in out/target/product/<target>. For emulator/x86_64 you’ll get system.img, vendor.img, boot.img, etc.

### 4) Optional: Use your images in Waydroid
Waydroid ships its own images, but you can experiment by swapping system/vendor images. This is advanced; ensure partition sizes match and keep backups of Waydroid’s original images in /var/lib/waydroid/images.

---

## Xiaomi Mi 8 SE (sirius): build and flash

Mi 8 SE codename is “sirius” (Snapdragon 710). Community device trees and vendor blobs are typically needed.

### 1) Get device trees, kernel, vendor blobs
- **Add local manifests:** Create .repo/local_manifests/sirius.xml pointing to device_sony… (example paths vary per maintainer) for:
  - **device/xiaomi/sirius**
  - **kernel/xiaomi/sdm710** or device-specific kernel
  - **vendor/xiaomi (proprietary blobs)**
- **Extract blobs from a working device:** Boot stock ROM, enable USB debugging, then:
```bash
adb pull /vendor vendor_dump
adb pull /system system_dump
```
Or use existing proprietary-files.txt + extract scripts provided by the device tree.

### 2) Lunch and build
```bash
source build/envsetup.sh
lunch lineage_sirius-userdebug   # or the ROM/device combo you added
m bacon -j"$(nproc)"             # Lineage zip, or `m -j` for raw images
```

Artifacts:
- **ZIP/OTA:** flashable via recovery.
- **Raw images:** boot.img, vendor_boot.img (if applicable), dtbo.img, system.img, product.img, vendor.img, vbmeta.img.

### 3) Prepare the phone
- **Unlock bootloader:** In developer options enable OEM unlock + USB debugging; use Xiaomi unlock tool on Windows to request unlock (wait period often applies). Unlock wipes data.
- **Enter fastboot:** Power off, then Volume Down + Power.

### 4) Flash recovery
```bash
fastboot flash recovery twrp_sirius.img
fastboot reboot recovery
```

### 5) Flash the ROM
- **If you have a ZIP:**
  - In recovery: Wipe data, cache, system (per ROM instructions).
  - Sideload:
    ```bash
    adb sideload lineage-21.0-YYYYMMDD-UNOFFICIAL-sirius.zip
    ```
- **If you have raw images (fastbootd may be needed):**
```bash
fastboot --set-active=a
fastboot flash boot boot.img
fastboot flash dtbo dtbo.img
fastboot flash vbmeta --disable-verity --disable-verification vbmeta.img
fastboot flash vendor vendor.img
fastboot flash system system.img
fastboot flash product product.img
```
Reboot:
```bash
fastboot reboot
```

First boot can take 5–10 minutes.

---

## Quick troubleshooting checklist

- **Waydroid fails to start:** Ensure binderfs is mounted and loop module loaded.
  ```bash
  ls /dev/binderfs || sudo mount -t binder binder /dev/binderfs
  sudo modprobe binder_linux loop
  sudo systemctl restart waydroid-container
  ```
- **No UI or slow graphics:** Use a Wayland session; verify you’re on Intel/AMD drivers, not NVIDIA’s legacy stack.
- **AOSP build errors:** Check Java version (OpenJDK 11 for AOSP 12–14), ensure disk space, run `make clean && make clobber` before rebuilding.
- **VirtualBox input/network issues:** Enable USB tablet device, NAT networking, and 3D acceleration if supported by your host.
- **Device bootloops:** Check vbmeta flags, match firmware base, and confirm you flashed all required partitions for that device tree/ROM version.
- **Radio/camera broken:** Missing or mismatched vendor blobs; re-extract from matching firmware and rebuild.

---

If you share your exact Ubuntu kernel version, GPU model, and whether you prefer binderfs or legacy binder devices, I can generate a minimal .config diff and exact commands tailored to your setup.
